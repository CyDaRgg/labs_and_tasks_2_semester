#include <stdio.h>
#include <conio.h>
#include <locale.h>
#include <io.h>
// ------------------------------------------  БИНАРНЫЙ ФАЙЛ ------------------------------------------------

// вводим в БИНАРНЫЙ файл несколько чисел по возрастанию, 
// добавить в файл числа размещая их без нарушения упорядоченности

//void print(FILE *f)
//{
//	int j;
//	if (!f)
//	{
//		puts("файл не открыт");
//		return;
//	}
//	rewind(f);
//	do
//	{
//		fread(&j, sizeof(int), 1, f);
//		if (feof(f))  break;
//		printf("%3d", j);   // 3d просто для наглядности в отображении консоли
//	} while (1);
//	printf("\n");
//}
//
//int main()
//{
//  setlocale(LC_ALL, "Russian");
//  FILE *f;
//  int ms[] = { 5, 7, 10, 13, 14 };
//  int i, j;
//  int k = 4;
//  fpos_t l1, l2;     // тип позиция в файле
//  char name[20];
// // puts("введите имя файла ");
// // scanf_s("%s", name);
//  fopen_s(&f, "dd", "w+b");
//  fwrite(ms, sizeof(int), sizeof(ms) / sizeof(int), f); //
//  print(f);
//  while (1)
//  {
//	puts("введите очередное число ");
//	scanf_s("%d", &i);
//	if (i == 999) break;               // выход из программы
//	rewind(f);	                       // установка УТПФ в начало файла и сброс
//	do                                 // признака конца файла
//	{
//	    fgetpos(f, &l1);               // УТПФ наначало поля считываемого числа
//	    fread(&j, sizeof(int), 1, f);
//		if (feof(f) || j>i)  break;    // достигнут конец файла или считано число
//		                               // большее чем введенное с клавиатуры.
//	} while (1);
//	rewind(f);
//	if (j<i)                           // EOF и в файле нет числа > чем введенное
//	{
//		fseek(f, 0, 2);                // выход на конец файла
//		fwrite(&i, sizeof(int), 1, f); // дозапись в конец файла
//		print(f);
//		continue;
//	}
//	fseek(f, -4, 2);         // УТПФ на последний элемент файла
//	do
//	{
//		fgetpos(f, &l2);               // сдвиг всех чисел в массиве до
//		fread(&j, sizeof(int), 1, f);  // l2 позиция УТПФ числа которое > чем i
//		rewind(f);
//		l2 += sizeof(int);
//		fsetpos(f, &l2);
//		fwrite(&j, sizeof(int), 1, f);
//		fseek(f, l2 - 2 * k, 0);
//	} while (l1<l2 - sizeof(int));
//	fseek(f, l2 - k, 0);     // запись i на место числа с которого
//	fwrite(&i, sizeof(int), 1, f);     // произведен сдвиг всех чисел вниз
//	print(f);
//  }	                                   
//  //rewind(f);
//  //do
//  //{
//	 // fread(&j, sizeof(int), 1, f);
//	 // if(feof(f))  break;
//	 // printf("%3d", j);
//  //} while (1);
//  //printf("\n");
//// print(f);
//  fclose(f);
//  return 0;           //*****  читать бинарные файлы в тотал коомандоре + вывод трехзначных чисел и более неправильный но в файле сохраняется все правильно
//}

//=================================================================
// Пример программы, выполняющей работу с файлом содержащим структуры,
// например, некоторые параметры компьютера
// режимы работы: создание/просмотр/удаление информации из базы данных (файла)

//#include <stdlib.h>
//#include <string.h>
//
//void add(char *);
//void del(char *);
//void print(char *);
//void swap(FILE *ff, struct str, struct str, fpos_t *, fpos_t *);
//void zamena(char *);
//
//struct inf {
//	char tp[15];        // название  //********обязательно СТАТИЧЕСКИЙ МАССИВ, а не char*tp, так как при запись в файл запишется не не символьная строка, а указатель
//	unsigned short pr;  // процессор
//};
//struct str {
//	struct inf in;
//	double hd;          // HDD
//	int mem;            // память
//};
//
//int main()
//{
//	setlocale(LC_ALL, "Russian");
//	FILE *f;
//	char name[] = "baza";
//	int i, k, pl;
//	while (1)
//	{
//		puts("\n1- создать/добавить \n2- \n3-удалить \n4-вывести на экран \n5-выход\n выберите режим работы");
//		scanf_s("%d", &k);
//		switch (k)
//		{
//			case 1: add(name); break;
//			case 3: del(name); break;
//			case 2: zamena(name); break;
//			case 4: print(name); break;
//			case 5: return 0;
//		}
//	}
//	return 0;
//}
//
//void add(char *name)
//{
//	double a;
//	struct str *s;
//	FILE *f;
//	if ((fopen_s(&f,name, "ab"))) // a файл открывается для дозаписи новой инфы
//	{	puts("ошибка открытия файла");
//		return;
//	}
//	if ((s = (struct str *)calloc(1, sizeof(struct str))) == NULL)
//	{	puts("ошибка при выделении памяти");
//		fclose(f);
//		return;
//	}
//	do
//	{	//fflush(stdin);
//		rewind(stdin);
//		puts("введите тип компъютера ");
//		gets(s->in.tp); if (!strcmp(s->in.tp, "")) break;
//		puts("введите частоту проц. , объем  HDD   и  памяти");
//		scanf_s("%d", &(s->in.pr));
//		scanf_s("%lf", &a);        // ???????/
//		s->hd = a;
//		scanf_s("%d", &s->mem);
//		fwrite(s, sizeof(struct str), 1, f);   // дозапись структуры в конец файла
//	} while (1);
//	fclose(f);
//}
//
//void del(char *name)
//{
//	FILE *f;
//	struct str st, stt;
//	fpos_t l;
//	int k = sizeof(struct str);
//	if ((fopen_s(&f,name, "r+b")))
//	{
//		puts(" ошибка  открытия файла");
//		return;
//	}
//	puts("\nвведите тип компъютера : "); scanf_s("%s", st.in.tp);
//	puts("\nвведите частоту проц.  : "); scanf_s("%d%", &st.in.pr);
//	puts("\nвведите объем  HDD     : "); scanf_s("%lf", &st.hd);
//	puts("\nвведите объем  памяти  : "); scanf_s("%d",  &st.mem);
//	do
//	{	fread(&stt, sizeof(struct str), 1, f);
//
//		if (feof(f)) break;
//
//		if (!strcmp(st.in.tp, stt.in.tp) && st.in.pr == stt.in.pr &&
//			st.hd == stt.hd && st.mem == stt.mem)
//		{                  // найдена удаляемая структура   sst
//			do
//			{	fread(&stt, sizeof(struct str), 1, f);          // чтение следующей стр-ры
//				if (feof(f)) break;
//				l = ftell(f);                            // позиция за считанной
//				fseek(f, l - (fpos_t)(2 * sizeof(struct str)), 0);// на 2 стр-ры назад к началу файла
//				fwrite(&stt, sizeof(struct str), 1, f);         // и запись считанной ст-ры
//				fseek(f, l, 0);                          // возврат к позиции L
//			} while (!feof(f));
//		}
//	} while(1);
//	rewind(f);
//	fseek(f, -k, 2);
//	l = ftell(f);
//	_chsize(_fileno(f),l);
//	fclose(f);
//}
//
//void print(char *name)
//{
//	FILE *f;
//	struct str st;
//	int k = 0;
//	if ((fopen_s(&f,name, "rb")))
//	{
//		puts(" ошибка  открытия файла");
//		return;
//	}
//	puts("   тип компъютера    процессор     HDD    RAM");
//	do
//	{
//		k++;              // счетчик числа выведенных на экран записей
//		fread(&st, sizeof(struct str), 1, f);
//		if (feof(f)) break;
//		if (k >= 10)         // выведено 5 записей
//		{
//			k = 0;             // сброс четчика
////			getch();         // задержка вывода на экран
//			puts("   тип компъютера    процессор     HDD    RAM");
//		}
//		printf("\n%20s%10d%8.2lf%8d", st.in.tp, st.in.pr, st.hd, st.mem);
//	} while (!feof(f));
//	fclose(f);
//}
//
//void zamena(char *name)
//{
//	FILE *f;
//	struct str st1,st2;
//	fpos_t n1, n2;
//	int k = 0;
//	if ((fopen_s(&f,name, "r+b")))
//	{
//		puts(" ошибка  открытия файла");
//		return;
//	}
//	do
//	{ 
//		fgetpos(f,&n1);
//		k=fread(&st1, sizeof(struct str), 1, f);
//		if (feof(f)) break;
//		fgetpos(f, &n2);
//		k=fread(&st2, sizeof(struct str), 1, f);
//		if (feof(f)) break;
//		swap(f, st1, st2, &n1, &n2);
//		n1 = n2 + sizeof(struct str);
//		fsetpos(f,&n1);
//	} while (1);
//	fclose(f);
//}
//
//void swap(FILE *ff, struct str s1, struct str s2, fpos_t *l1, fpos_t *l2)
//{
//	if (!ff) return;
//	fsetpos(ff, l1);
//	fwrite(&s2, sizeof(struct str), 1, ff);    // вторая стр-ра по первому адресу
//	fsetpos(ff, l2);
//	fwrite(&s1, sizeof(struct str), 1, ff);    // первая стр-ра по второму адресу
//}


int main()
{
	FILE* f;

	fopen_s(&f, "sdsd", "wb");
	//int a=0x42;//B
	char a = '2';

	fwrite(&a, sizeof(int), 1, f);
	



	return 0;
}

                                                                                //Плохая попытка написать лабу по бинарным файлам//
//#define _CRT_SECURE_NO_WARNINGS
////5. Дан бинарный файл, содержащий различные даты. Каждая дата – это число, месяц, год.Найти:
////а) год с наименьшим номером;
////б) все весенние даты;
////в) самую позднюю дату.
//
//#include <stdio.h>
//#include <conio.h>
//#include <locale.h>
//#include <io.h>
//#include <malloc.h>
//#include<stdlib.h>
//#include <Windows.h>
//
//
//void Transfer(struct data* checkData, struct data** springData, struct data* lateData, int* minYear, int* numberOfSpringData);
//void OutPutOfResults(int* minYear, struct data** springData, struct data* lateData, int numberOfSpringData);
//
//
//
//
//
//
//struct data
//{
//	int Number;
//	char point1;
//	int Month;
//	char point2;
//	int Year;
//	char symbol;
//};
//
//void Zanoc(struct data* one, struct data* two)
//{
//	one->Number = two->Number;
//	one->Month = two->Month;
//	one->Year = two->Year;
//	one->point1 = two->point1;
//	one->point2 = two->point2;
//	one->symbol = ';';
//}
//
//
//
//
//void OutPutOfElements(struct data* check)
//{
//	printf("%d%c%d%c%d%c%c", check->Number, check->point1, check->Month, check->point2, check->Year, check->symbol, ' ');
//}
//
//
//int inPutData(struct data** Data,FILE* binaryFile) // Заполнение DATA и файла
//{
//	//FILE* binaryFile;
//
//	int checkInput;
//	int addInput;
//	int endOfInput;
//	int amountOfData;
//	int flag = 1;
//	char space = ' ';
//
//
//	/*if (fopen_s(&binaryFile, "binaryFile1", "w+b"))
//	{
//		printf("Файл не открылся для записи");
//		
//	}*/
//
//	printf("Введите количество дат, которые вы хотите заполнить: ");
//	scanf_s("%d", &amountOfData);
//
//
//	endOfInput = inPut(Data, 0, amountOfData); // заполню структуру DATA   ***************************
//
//	while (flag)      //доп задание
//	{
//		printf("Хотите еще ввести даты?");
//		printf("\nЕсли да, то нажмите 1");
//		printf("\nЕсли нет, то нажмите 2\n");
//
//		scanf_s("%d", &checkInput);
//
//		switch (checkInput)
//		{
//		case(1):
//
//			printf("Сколько еще дат вы хотите ввести?\n");
//			scanf_s("%d", &addInput);
//
//			(*Data) = (struct data*)realloc((*Data), (endOfInput + addInput) * sizeof(struct data));///
//
//			endOfInput = inPut(Data, endOfInput, (endOfInput + addInput));
//			break;
//
//		case(2):
//			flag = 0;
//			break;
//
//		}
//	}
//
//	for (int i = 0; i < endOfInput; i++)
//	{
//
//
//		int a = fwrite(&((*Data)[i]), sizeof(struct data), 1, binaryFile);
//		//printf("%d", a);
//		//fwrite(&space, sizeof(char), 1, binaryFile);
//	}
//
//	
//	fclose(binaryFile);
//	//free(binaryFile);
//	return endOfInput;
//}
//
//int inPut(struct data** Data, int startInput, int amountOfData)
//{
//	int check;
//	int number;
//	int month;
//	int year;
//	static int counter = 0;
//
//	for (int i = startInput; i < amountOfData; i++)
//	{
//		counter++;
//		printf("\nЗаполните %d дату:", counter);
//
//		printf(" \nЧисло: ");
//
//		while (1)
//		{
//			check = scanf_s("%d", &number);
//
//			if (!check || number <= 0 || number >= 32)
//			{
//				printf("Такого числа не существует! Введите еще раз число: ");
//				rewind(stdin);
//				continue;
//			}
//			else
//				break;
//
//		}
//
//		(*Data)[i].Number = number;
//		(*Data)[i].point1 = '.';
//
//		printf(" \nМесяц: ");
//
//		while (1)
//		{
//			check = scanf_s("%d", &month);
//			if (!check || month <= 0 || month >= 13)
//			{
//				printf("Такого месяца не существует! Введите месяц еще раз:");
//				rewind(stdin);
//				continue;
//			}
//			else
//				break;
//		}
//
//		(*Data)[i].Month = month;
//		(*Data)[i].point2 = '.';
//
//
//		printf(" \nГод: ");
//
//		while (1)
//		{
//			check = scanf_s("%d", &year);
//			if (!check || year <= 0)
//			{
//				printf("Такого года не существует! Введите еще раз");
//				rewind(stdin);
//				continue;
//			}
//			else
//				break;
//		}
//
//		(*Data)[i].Year = year;
//		(*Data)[i].symbol = ';';
//
//	}
//	return amountOfData;
//}
//
//
//
//int CheckOfInformation(int* minYear, struct data** springData, struct data* lateData,FILE* binaryFile,int *amountOfData) // первый занос и циклическая проверка
//{
//	//FILE* binaryFile;
//	char skipSpace;
//	int temp = amountOfData;
//
//	struct data* checkData;
//	checkData = (struct data*)calloc(1, sizeof(struct data));
//
//	int numberOfSpringData = 0;
//
//
//	if (fopen_s(&binaryFile,"binaryFile", "r+b"))
//	{
//		printf("Файл не открылся для чтения");
//		
//	}
//
//	printf("\nВывод всех дат на экран: ");
//	int p = fread(checkData, sizeof(struct data), 1, binaryFile);
//	//printf("%d", p);
//	OutPutOfElements(checkData);
//
//	//if (!feof(binaryFile))
//		//fread(&skipSpace, sizeof(char), 1, binaryFile);
//
//	////////////////////////////////////
//	(*minYear) = checkData->Year;
//	/////////////////////////////////////////
//	Zanoc(lateData, checkData);
//	
//	//////////////////////////
//
//	if (checkData->Month >= 3 && checkData->Month <= 5)
//	{
//		numberOfSpringData++;
//		Zanoc(&(((*springData)[0])),checkData);
//	}
//	
//
//	//////////////////
//
//	//if (!feof(binaryFile))
//	if(temp>1)
//	{
//		while (temp!=1)
//		{
//			
//			
//		int q=	fread(checkData, sizeof(struct data), 1, binaryFile);
//			OutPutOfElements(checkData);
//
//			//if (!feof(binaryFile))
//				//fread(&skipSpace, sizeof(char), 1, binaryFile);
//
//			Transfer(checkData, springData, lateData, minYear, &numberOfSpringData);
//			temp--;
//		}
//	}
//	fclose(binaryFile);
//	//free(binaryFile);
//	//free(checkData);
//
//	return numberOfSpringData;
//}
//
//void Transfer(struct data* checkData, struct data** springData, struct data* lateData, int* minYear, int* numberOfSpringData)
//{
//	int flag = 1;
//	/////////////////////////////check////////////////////////////////////
//
//	if (checkData->Year < (*minYear))
//		(*minYear) = checkData->Year;
//	////////////////////springdata//////////////////////////
//	if (checkData->Month >= 3 && checkData->Month <= 5)
//	{
//		(*numberOfSpringData)++;
//
//		(*springData) = (struct data*)realloc((*springData), (*numberOfSpringData) * sizeof(struct data));
//
//		Zanoc( &((*springData)[(*numberOfSpringData)-1]), checkData );
//
//
//	}
//
//
//	///////////////////////lateData//////////////////////
//	if (checkData->Year > lateData->Year&& flag)
//	{
//		if (checkData->Year < lateData->Year)  //отсекаем дальнейший проход
//			flag = 0;
//
//		Zanoc(lateData, checkData);
//
//
//		//if (checkData->Year == lateData->Year)
//		if (checkData->Month > lateData->Month && flag)
//		{
//			if (checkData->Month < lateData->Month)
//				flag = 0;
//
//			Zanoc(lateData, checkData);
//
//
//		}
//		//if (checkData->Month == lateData->Month)
//		if (checkData->Number > lateData->Number && flag)
//		{
//			Zanoc(lateData, checkData);
//		}
//
//
//	}
//}
//
//
//
//
//void OutPutOfResults(int* minYear, struct data** springData, struct data* lateData, int numberOfSpringData)
//{
//	printf("\nГод с наименьшим номером:%d", (*minYear));
//
//	if (numberOfSpringData == 0)
//	{
//		printf("\nВесенних дат нету.");
//		printf("\n");
//	}
//	else
//	{
//		printf("\nВсе весенние даты:");
//		for (int i = 0; i < numberOfSpringData; i++)
//		{
//			printf("%d%c%d%c%d%c", (*springData)[i].Number, (*springData)[i].point1, (*springData)[i].Month, (*springData)[i].point2, (*springData)[i].Year, (*springData)[i].symbol);
//			//OutPutOfElements(springData + i);
//			printf("\n");
//		}
//	}
//	printf("Позжая дата:%d%c%d%c%d%c", lateData->Number, lateData->point1, lateData->Month, lateData->point2, lateData->Year, lateData->symbol);
//}
//
//
//
//
//	int main()
//	{
//	system("color f0");
//	struct data* Data;
//	int endOfInput;
//
//	FILE* binaryFile;
//
//	fopen_s(&binaryFile, "binaryFile", "w+b");
//
//	SetConsoleCP(1251);// установка кодовой страницы win-cp 1251 в поток ввода
//	SetConsoleOutputCP(1251); // установка кодовой страницы win-cp 1251 в поток вывода
//
//	int minYear;
//	struct data* springData;
//	struct data* lateData;
//
//	int numberOfSpringData;
//
//	Data = (struct data*)calloc(1, sizeof(struct data));
//	lateData = (struct data*)calloc(1, sizeof(struct data));
//	springData = (struct data*)calloc(1, sizeof(struct data));
//
//
//	endOfInput= inPutData(&Data,binaryFile);
//	numberOfSpringData = CheckOfInformation(&minYear, &springData, lateData,binaryFile,endOfInput);
//	OutPutOfResults(&minYear, &springData, lateData, numberOfSpringData);
//
//	free(Data);
//	free(springData);
//	free(lateData);
//
//	return 0;
//}

                                                                                //Красивая программа от Паши(Операции с бинарным файлом)//
//#include<stdio.h>
//#include<stdlib.h>
//#include<malloc.h>
//
//#define LENGTH 20
//
//typedef struct _Date
//{
//	int Day;
//	int Month;
//	int Year;
//}Date, *PDate;
//
//int OutputAllData(PDate PDateInfo, int CurLen);
//int AddNewDateRecord(PDate* PDateInfo, int* CurLen);
//int ChangeDateRecord(PDate* PDateInfo, int ArrayLen);
//int LoadDateFromFile(PDate* PDateInfo, int* ArrayLen);
//int SaveDateToFile(PDate* PDateInfo, int ArrayLen);
//
//void main()
//{
//	char SInput[LENGTH] = { 0 };
//	PDate PDateInfo = NULL;
//	int CurDateInfoLen = 0;
//
//	while (strcmp(SInput, "Quit")) {
//		rewind(stdin);
//		printf("'View', 'New', 'Quit', 'Change', 'FLoad', 'FSave': ");
//		fgets(SInput, LENGTH, stdin);
//		SInput[strlen(SInput) - 1] = 0;
//
//		if (!strcmp(SInput, "View")) {
//			OutputAllData(PDateInfo, CurDateInfoLen);
//		}
//
//		if (!strcmp(SInput, "New")) {
//			AddNewDateRecord(&PDateInfo, &CurDateInfoLen);
//		}
//
//		if (!strcmp(SInput, "Change")) {
//			printf("Choice record: \n");
//			OutputAllData(PDateInfo, CurDateInfoLen);
//			ChangeDateRecord(&PDateInfo, CurDateInfoLen);
//		}
//
//		if (!strcmp(SInput, "FLoad")) {
//			LoadDateFromFile(&PDateInfo, &CurDateInfoLen);
//		}
//
//		if (!strcmp(SInput, "FSave")) {
//			SaveDateToFile(&PDateInfo, CurDateInfoLen);
//		}
//
//	}
//
//	if (PDateInfo != NULL) {
//		free(PDateInfo);
//	}
//}
//
//int OutputAllData(PDate PDateInfo, int CurLen)
//{
//	for (int i = 0; i < CurLen; i++) {
//		printf("=============\nNumber: %d\n-------------\nDay: %d\nMonth: %d\nYear: %d\n=============\n", i, PDateInfo[i].Day, PDateInfo[i].Month, PDateInfo[i].Year);
//	}
//	return 0;
//}
//
//int FillDateRecord(PDate* PDateInfo, int ArrayLen, int NumToChange);
//
//int AddNewDateRecord(PDate *PDateInfo, int* CurLen)
//{
//	(*PDateInfo) = (PDate)realloc((*PDateInfo), ((*CurLen) + 1) * sizeof(Date));
//	if (PDateInfo == NULL) {
//		return 1;
//	}
//	FillDateRecord(PDateInfo, (*CurLen) + 1, *(CurLen));
//	(*CurLen)++;
//	return 0;
//}
//
//int FillDateRecord(PDate* PDateInfo, int ArrayLen, int NumToFill)
//{
//	if (NumToFill >= ArrayLen || NumToFill < 0) {
//		return 1;
//	}
//	printf("Day ");
//	rewind(stdin);
//	scanf_s("%d", &((*PDateInfo)[NumToFill].Day));
//	printf("Month ");
//	rewind(stdin);
//	scanf_s("%d", &((*PDateInfo)[NumToFill].Month));
//	printf("Year ");
//	rewind(stdin);
//	scanf_s("%d", &((*PDateInfo)[NumToFill].Year));
//	return 0;
//}
//
//int ChangeDateRecord(PDate* PDateInfo, int ArrayLen)
//{
//	int NumToChange = -1;
//	rewind(stdin);
//	printf("Number to change ");
//	scanf_s("%d", &NumToChange);
//	FillDateRecord(PDateInfo, ArrayLen, NumToChange);
//	return 0;
//}
//
//int LoadDateFromFile(PDate* PDateInfo, int* ArrayLen)
//{
//	FILE* SourceFile;
//	char FileName[LENGTH];
//	printf("Enter file name ");
//	rewind(stdin);
//	fgets(FileName, LENGTH, stdin);
//	FileName[strlen(FileName) - 1] = 0;
//
//	if (fopen_s(&SourceFile, FileName, "rb")) {
//		printf("Error\n");
//		return 1;
//	}
//	fseek(SourceFile, 0, SEEK_END);
//	*ArrayLen = ftell(SourceFile) / sizeof(Date);
//	fseek(SourceFile, 0, SEEK_SET);
//
//	(*PDateInfo) = (PDate)realloc((*PDateInfo), (*ArrayLen));
//	if (PDateInfo == NULL) {
//		return 1;
//	}
//
//	fread((*PDateInfo), sizeof(Date), *ArrayLen, SourceFile);
//	fclose(SourceFile);
//	return 0;
//}
//
//int SaveDateToFile(PDate* PDateInfo, int ArrayLen)
//{
//	FILE* DestFile;
//	char FileName[LENGTH];
//	printf("Enter file name ");
//	rewind(stdin);
//	fgets(FileName, LENGTH, stdin);
//	FileName[strlen(FileName) - 1] = 0;
//
//	fopen_s(&DestFile, FileName, "wb");
//	fseek(DestFile, 0, SEEK_SET);
//
//	fwrite((*PDateInfo), sizeof(Date), ArrayLen, DestFile);
//	fclose(DestFile);
//
//	return 0;
//}
